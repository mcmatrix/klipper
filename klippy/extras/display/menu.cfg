# This file serves as default menu structure.
# See the "example-menu.cfg" file for description of common config parameters.

### DEFAULT MENU ###

### main screen 20 x 4 ###
[menu __screen_2004_v1]
type: view
name: Screen 20x4 v1
content:
    {% macro clock(time) -%}
        {"%02dh%02dm" % (time//3600, (time%3600)//60)}
    {%- endmacro %}
    {% macro progress() -%}
        {% if 'virtual_sdcard' in printer and (printer.virtual_sdcard.progress and not printer.display.progress) -%}
            ~sd~{"%3d" % printer.virtual_sdcard.progress}%
        {% else -%}
            ~usb~{"%3d" % printer.display.progress}%
        {%- endif %}
    {%- endmacro %}
    ~extruder~{"%3d" % printer.extruder.temperature}~right_arrow~{"%3d" % printer.extruder.target}~degrees~  Z{"%06.2f" % printer.toolhead.position.z}
    ~bed~{"%3d" % printer.heater_bed.temperature}~right_arrow~{"%3d" % printer.heater_bed.target}~degrees~  {progress()}
    ~fan~{'%3d%%' % (100.0 * printer.fan.speed)}  ~feedrate~{"%3d%%" % (100.0 * printer.gcode.speed_factor)} ~clock~{clock(printer.toolhead.printing_time)}
    {printer.display.message}
popup_main: __main
popup_flow: __flowscreen
autorun: true
press_script:
    {% if menu.press_event == 'short' -%}
        {action.popup('main')}
    {% elif menu.press_event == 'double' -%}
        {action.popup('flow')}
    {%- endif %}

[menu __flowscreen]
type: view
name: Flow quickedit
initial: 0
content:
    `{' '*5}{'='*10}
    `{' '*5}<?item:.__flow?>
    `{' '*5}{'='*10}

[menu __flowscreen __flow]
type: input
name: Flow: {'%3d' % (me.input*100)}%
input: {printer.gcode.extrude_factor}
input_min: 0
input_max: 2
input_step: 0.01
use_cursor: False
use_blinking: True
blinking_mask: ++++++...+
fall_into: True
automated: False
input_script:
    M221 S{'%d' % (me.input*100)}
press_script:
    {action.menu.back(True)}

### menu main ###
[menu __main]
type: view
name: Main Menu
content:
    <?back: ..?>
    {% for item in me.runtime_items -%}
        {item}
    {% endfor -%}
items:
    __tune
    __octoprint
    __sdcard
    __control
    __temp
    __filament
    __prepare
    __test

### menu tune ###
[menu __tune]
type: view
enable: {printer.idle_timeout.state == "Printing"}
name: Tune
content:
    <?back: ..?>
    <?item:.__speed?>
    <?item:.__flow?>
    <?item:.__offsetz?>

[menu __tune __speed]
type: input
name: Speed: {'%3d' % (me.input*100)}%
input: {printer.gcode.speed_factor}
input_min: 0
input_max: 2
input_step: 0.01
input_script:
    M220 S{'%d' % (me.input*100)}

[menu __tune __flow]
type: input
name: Flow: {'%3d' % (me.input*100)}%
input: {printer.gcode.extrude_factor}
input_min: 0
input_max: 2
input_step: 0.01
input_script:
    M221 S{'%d' % (me.input*100)}

[menu __tune __offsetz]
type: input
name: Offset Z:{'%05.3f' % me.input}
input: {printer.gcode.homing_zpos}
input_min: -5
input_max: 5
input_step: 0.005
input_script:
    SET_GCODE_OFFSET Z={'%.3f' % me.input}


### menu octoprint ###
[menu __octoprint]
type: view
name: OctoPrint
content:
    <?back:..?>
    <?item:.__pause?>
    <?item:.__resume?>
    <?item:.__abort?>
    {% for item in me.runtime_items -%}
        {item}
    {% endfor -%}

[menu __octoprint __pause]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Pause printing
press_script:
    {printer.gcode.action_respond_info('action:pause')}

[menu __octoprint __resume]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Resume printing
press_script:
    {printer.gcode.action_respond_info('action:resume')}

[menu __octoprint __abort]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Abort printing
press_script:
    {printer.gcode.action_respond_info('action:cancel')}

### menu virtual sdcard ###
[menu __sdcard]
type: vsdview
name: SD Card
content:
    <?back:..?>
    <?item:.__start?>
    <?item:.__resume?>
    <?item:.__pause?>
    {% for item in me.runtime_items -%}
        {item}
    {% endfor -%}

[menu __sdcard __start]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Start printing
press_script: M24

[menu __sdcard __resume]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Resume printing
press_script: M24

[menu __sdcard __pause]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Pause printing
press_script: M25

### menu control ###
[menu __control]
type: view
name: Control
content:
    <?back:..?>
    <?item:.__home?>
    <?item:.__homez?>
    <?item:.__homexy?>
    <?item:.__move_10mm?>
    <?item:.__move_1mm?>
    <?item:.__move_01mm?>
    <?item:.__disable?>
    <?item:.__fanonoff?>
    <?item:.__fanspeed?>
    <?item:.__caselightonoff?>
    <?item:.__caselightpwm?>

[menu __control __home]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home All
press_script: G28

[menu __control __homez]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home Z
press_script: G28 Z

[menu __control __homexy]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home X/Y
press_script: G28 X Y

[menu __control __disable]
type: command
name: Disable steppers
press_script:
    M84
    M18

[menu __control __fanonoff]
type: input
enable: {'fan' in printer}
name: Fan {'ON ' if me.input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 1
press_script:
    M106 S{255 if me.input else 0}

[menu __control __fanspeed]
type: input
enable: {'fan' in printer}
name: Fan speed: {'%3d' % (me.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
press_script:
    M106 S{'%d' % (me.input*255)}

[menu __control __caselightonoff]
type: input
enable: {'output_pin caselight' in printer}
name: Case light: {'ON ' if me.input else 'OFF'}
input: {printer['output_pin caselight'].value}
input_min: 0
input_max: 1
input_step: 1
press_script:
    SET_PIN PIN=caselight VALUE={1 if me.input else 0}

[menu __control __caselightpwm]
type: input
enable: {'output_pin caselight' in printer}
name: Case light:{'%3d' % (me.input*100)}%
input: {printer['output_pin caselight'].value}
input_min: 0.0
input_max: 1.0
input_step: 0.01
press_script:
    SET_PIN PIN=caselight VALUE={me.input}

### menu move 10mm ###
[menu __control __move_10mm]
type: view
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 10mm
content:
    <?back:..?>
    <?item:.__axis_z?>
    <?item:.__axis_x?> <?item:.__axis_y?>
    <?item:.__axis_e?>

[menu __control __move_10mm __axis_x]
type: input
name: X:{'%05.1f' % me.input}
input: {printer.toolhead.position.x}
input_min: 0
input_max: 200.0
input_step: 10.0
press_script:
    G90
    G1 X{me.input}

[menu __control __move_10mm __axis_y]
type: input
name: Y:{'%05.1f' % me.input}
input: {printer.toolhead.position.y}
input_min: 0
input_max: 200.0
input_step: 10.0
press_script:
    G90
    G1 Y{me.input}

[menu __control __move_10mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % me.input}
input: {printer.toolhead.position.z}
input_min: 0
input_max: 200.0
input_step: 10.0
press_script:
    G90
    G1 Z{me.input}

[menu __control __move_10mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % me.input}
input: 0
input_min: -50.0
input_max: 50.0
input_step: 10.0
press_script:
    M83
    G1 E{me.input} F240

### menu move 1mm ###
[menu __control __move_1mm]
type: view
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 1mm
content:
    <?back:..?>
    <?item:.__axis_z?>
    <?item:.__axis_x?> <?item:.__axis_y?>
    <?item:.__axis_e?>

[menu __control __move_1mm __axis_x]
type: input
name: X:{'%05.1f' % me.input}
input: {printer.toolhead.position.x}
input_min: 0
input_max: 200.0
input_step: 1.0
press_script:
    G90
    G1 X{me.input}

[menu __control __move_1mm __axis_y]
type: input
name: Y:{'%05.1f' % me.input}
input: {printer.toolhead.position.y}
input_min: 0
input_max: 200.0
input_step: 1.0
press_script:
    G90
    G1 Y{me.input}

[menu __control __move_1mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % me.input}
input: {printer.toolhead.position.z}
input_min: 0
input_max: 200.0
input_step: 1.0
press_script:
    G90
    G1 Z{me.input}

[menu __control __move_1mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % me.input}
input: 0
input_min: -50.0
input_max: 50.0
input_step: 1.0
press_script:
    M83
    G1 E{me.input} F240

### menu move 0.1mm ###
[menu __control __move_01mm]
type: view
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 0.1mm
content:
    <?back:..?>
    <?item:.__axis_z?>
    <?item:.__axis_x?> <?item:.__axis_y?>
    <?item:.__axis_e?>

[menu __control __move_01mm __axis_x]
type: input
name: X:{'%05.1f' % me.input}
input: {printer.toolhead.position.x}
input_min: 0
input_max: 200.0
input_step: 0.1
press_script:
    G90
    G1 X{me.input}

[menu __control __move_01mm __axis_y]
type: input
name: Y:{'%05.1f' % me.input}
input: {printer.toolhead.position.y}
input_min: 0
input_max: 200.0
input_step: 0.1
press_script:
    G90
    G1 Y{me.input}

[menu __control __move_01mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % me.input}
input: {printer.toolhead.position.z}
input_min: 0
input_max: 200.0
input_step: 0.1
press_script:
    G90
    G1 Z{me.input}

[menu __control __move_01mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % me.input}
input: 0
input_min: -50.0
input_max: 50.0
input_step: 0.1
press_script:
    M83
    G1 E{me.input} F240

### menu temperature ###
[menu __temp]
type: view
name: Temperature
content:
    <?back:..?>
    {% if 'extruder' in printer -%}
    ` Ex0:{'%4.0f' % printer.extruder.temperature} <?item:.__hotend0_target?>
    {%- endif %}
    {% if 'extruder1' in printer -%}
    ` Ex1:{'%4.0f' % printer.extruder1.temperature} <?item:.__hotend1_target?>
    {%- endif %}
    {% if 'heater_bed' in printer -%}
    ` Bed:{'%4.0f' % printer.heater_bed.temperature} <?item:.__hotbed_target?>
    {%- endif %}
    <?item:.__preheat_pla?>
    <?item:.__preheat_abs?>
    <?item:.__cooldown?>

[menu __temp __hotend0_target]
type: input
enable: {'extruder' in printer}
name: {"T:%4.0f" % me.input}
use_blinking: true
blinking_mask: ++
input: {printer.extruder.target}
input_min: 0
input_max: 250
input_step: 1
input_step2: 10
press_script: M104 T0 S{'%.0f' % me.input}

[menu __temp __hotend1_target]
type: input
enable: {'extruder1' in printer}
name: {"T:%4.0f" % me.input}
use_blinking: true
blinking_mask: ++
input: {printer.extruder1.target}
input_min: 0
input_max: 250
input_step: 1
input_step2: 10
press_script: M104 T1 S{'%.0f' % me.input}

[menu __temp __hotbed_target]
type: input
enable: {'heater_bed' in printer}
use_blinking: true
blinking_mask: ++
name: {"T:%4.0f" % me.input}
input: {printer.heater_bed.target}
input_min: 0
input_max: 130
input_step: 1
input_step2: 10
press_script: M140 S{'%.0f' % me.input}

[menu __temp __preheat_pla]
type: view
name: Preheat PLA
content:
    <?back:..?>
    <?item:.__all?>
    <?item:.__hotend?>
    <?item:.__hotbed?>

[menu __temp __preheat_pla __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
press_script:
    M140 S60
    M104 S200

[menu __temp __preheat_pla __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
press_script: M104 S200

[menu __temp __preheat_pla __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
press_script: M140 S60

[menu __temp __preheat_abs]
type: view
name: Preheat ABS
content:
    <?back:..?>
    <?item:.__all?>
    <?item:.__hotend?>
    <?item:.__hotbed?>

[menu __temp __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
press_script:
    M140 S110
    M104 S245

[menu __temp __preheat_abs __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
press_script: M104 S245

[menu __temp __preheat_abs __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
press_script: M140 S110

[menu __temp __cooldown]
type: view
name: Cooldown
content:
    <?back:..?>
    <?item:.__all?>
    <?item:.__hotend?>
    <?item:.__hotbed?>

[menu __temp __cooldown __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Cooldown all
press_script:
    M104 S0
    M140 S0

[menu __temp __cooldown __hotend]
type: command
enable: {'extruder' in printer}
name: Cooldown hotend
press_script: M104 S0

[menu __temp __cooldown __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Cooldown hotbed
press_script: M140 S0

### menu filament ###

[menu __filament]
type: view
name: Filament
content:
    <?back:..?>
    {% if 'extruder' in printer -%}
    ` Ex0:{'%4.0f' % printer.extruder.temperature} <?item:__temp __hotend0_target?>
    {%- endif %}
    <?item:.__unload?>
    <?item:.__load?>
    <?item:.__feed?>

[menu __filament __load]
type: command
name: Load Filament
press_script:
    M83
    G1 E50 F1000
    G1 E50 F1000
    G1 E50 F1000
    G1 E50 F1000
    G1 E50 F300
    G1 E50 F300
    M82

[menu __filament __unload]
type: command
name: Unload Filament
press_script:
    M83
    G1 E-50 F1000
    G1 E-50 F1000
    G1 E-50 F1000
    G1 E-50 F1000
    G1 E-50 F1800
    G1 E-50 F1800
    G1 E-50 F1800
    G1 E-50 F1800
    M82

[menu __filament __feed]
type: input
name: Feed: {'%.1f' % me.input}
input: 0
input_step: 0.1
press_script:
    M83
    G1 E{'%.1f' % me.input} F30

### menu prepare ###
[menu __prepare]
type: view
enable: {not printer.idle_timeout.state == "Printing"}
name: Prepare
content:
    <?back:..?>
    <?item:.__delta_calib?>
    <?item:.__bedprobe?>
    <?item:.__hotend_pid_tuning?>
    <?item:.__hotbed_pid_tuning?>
    <?item:.__host_restart?>
    <?item:.__firmware_restart?>

[menu __prepare __host_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart host
press_script: RESTART

[menu __prepare __firmware_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart FW
press_script: FIRMWARE_RESTART

[menu __prepare __delta_calib]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Delta calibrate
press_script: DELTA_CALIBRATE

[menu __prepare __bedprobe]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Bed probe
press_script: PROBE

[menu __prepare __hotend_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: Tune Hotend PID
press_script: PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __prepare __hotbed_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: Tune Hotbed PID
press_script: PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

### test menu ###
[menu __test]
type: view
name: Test menu
content:
    <?back:..?>
    <?item:.__scroll?>
    <?item:.__dump?>

[menu __test __scroll]
type: command
name: This is very long item name
width: 18
scroll: true

[menu __test __dump]
type: command
name: Dump parameters
press_script:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { printer.gcode.action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { printer.gcode.action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

### special characters for hd44780
# \x00 - thermometer
# \x01 - heater_bed
# \x02 - speed_factor
# \x03 - clock
# \x04 - degrees
# \x05 - usb
# \x06 - sdcard
# \x07 - fan
# \x7e - right arrow

[menu __mainview2004_static]
type: view
name: Main view 20x04
content:
    Hello

[menu __mainview1604_static]
type: view
name: Main View 16x04
content:
    Hello
