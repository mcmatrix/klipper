# This file serves as default menu structure.
# See the "example-menu.cfg" file for description of common config parameters.

### DEFAULT MENU ###

### menu main ###
[menu __main]
type: list
name: "Main Menu"
items:
    __tune
    __octoprint
    __sdcard
    __control
    __temp
    __filament
    __prepare
    __test

### menu tune ###
[menu __tune]
type: list
enable: (status.toolhead.is_printing)
name: "Tune"
items:
    .__speed
    .__flow
    .__offsetz

[menu __tune __speed]
type: input
name: "Speed: %3d%%" % lerp(input, 0, 2, 0, 200)
input: status.gcode.speed_factor
input_min: 0
input_max: 2
input_step: 0.01
realtime: true
gcode: M220 S{'%d' % lerp(input, 0, 2, 0, 200)}

[menu __tune __flow]
type: input
name: "Flow: %3d%%" % lerp(input, 0, 2, 0, 200)
input: status.gcode.extrude_factor
input_min: 0
input_max: 2
input_step: 0.01
realtime: true
gcode: M221 S{'%d' % lerp(input, 0, 2, 0, 200)}

[menu __tune __offsetz]
type: input
name: "Offset Z:%05.3f" % input
input: status.gcode.homing_zpos
input_min: -5
input_max: 5
input_step: 0.005
realtime: true
gcode: SET_GCODE_OFFSET Z={'%.3f' % input}

### menu octoprint ###
[menu __octoprint]
type: list
name: "OctoPrint"
items:
    .__pause
    .__resume
    .__abort

[menu __octoprint __pause]
type: command
enable: (status.toolhead.is_printing)
name: "Pause printing"
gcode:
    {menu.respond('action:pause')}

[menu __octoprint __resume]
type: command
enable: (not status.toolhead.is_printing)
name: "Resume printing"
gcode:
    {menu.respond('action:resume')}

[menu __octoprint __abort]
type: command
enable: (status.toolhead.is_printing)
name: "Abort printing"
gcode:
    {menu.respond('action:cancel')}

### menu virtual sdcard ###
[menu __sdcard]
type: vsdcard
name: "SD Card"
items:
    .__start
    .__resume
    .__pause

[menu __sdcard __start]
type: command
enable: (not status.toolhead.is_printing)
name: "Start printing"
gcode: M24

[menu __sdcard __resume]
type: command
enable: (status.toolhead.is_printing)
name: "Resume printing"
gcode: M24

[menu __sdcard __pause]
type: command
enable: (status.toolhead.is_printing)
name: "Pause printing"
gcode: M25

### menu control ###
[menu __control]
type: list
name: "Control"
items:
    .__home
    .__homez
    .__homexy
    .__move_10mm
    .__move_1mm
    .__move_01mm
    .__disable
    .__fanonoff
    .__fanspeed
    .__caselightonoff
    .__caselightpwm

[menu __control __home]
type: command
name: "Home All"
gcode: G28
enable: (not status.toolhead.is_printing)

[menu __control __homez]
type: command
enable: (not status.toolhead.is_printing)
name: "Home Z"
gcode: G28 Z

[menu __control __homexy]
type: command
enable: (not status.toolhead.is_printing)
name: "Home X/Y"
gcode: G28 X Y

[menu __control __disable]
type: command
name: "Disable steppers"
gcode:
    M84
    M18

[menu __control __fanonoff]
type: input
enable: ('fan' in status)
name: "Fan %3s" % (['OFF','ON'][asbool(input)])
input: status.fan.speed
input_min: 0
input_max: 1
input_step: 1
gcode: M106 S{'%d' % ([0,255][asbool(input)])}

[menu __control __fanspeed]
type: input
enable: ('fan' in status)
name: "Fan speed: %3d%%" % lerp(input, 0, 1, 0, 100)
input: status.fan.speed
input_min: 0
input_max: 1
input_step: 0.01
gcode: M106 S{'%d' % lerp(input, 0, 1, 0, 255)}

[menu __control __caselightonoff]
type: input
enable: ('output_pin___caselight' in status)
name: "Case light: %3s" % (['OFF','ON'][asbool(input)])
input: status.output_pin___caselight.value
input_min: 0
input_max: 1
input_step: 1
gcode: SET_PIN PIN=caselight VALUE={[0,1][asbool(input)]}

[menu __control __caselightpwm]
type: input
enable: ('output_pin___caselight' in status)
name: "Case light: {:4.0%}".format(input)
input: status.output_pin___caselight.value
input_min: 0.0
input_max: 1.0
input_step: 0.01
gcode: SET_PIN PIN=caselight VALUE={'%.2f' % input}

### menu move 10mm ###
[menu __control __move_10mm]
type: list
enable: (not status.toolhead.is_printing)
name: "Move 10mm"
items:
    .__axis_z
    .__axis_x, .__axis_y
    .__axis_e

[menu __control __move_10mm __axis_x]
type: input
name: "X:%05.1f " % input
input: status.gcode.move_xpos
input_min: 0
input_max: 200.0
input_step: 10.0
gcode:
    G90
    G1 X{'%.1f' % input}

[menu __control __move_10mm __axis_y]
type: input
name: "Y:%05.1f " % input
input: status.gcode.move_ypos
input_min: 0
input_max: 200.0
input_step: 10.0
gcode:
    G90
    G1 Y{'%.1f' % input}

[menu __control __move_10mm __axis_z]
type: input
enable: (not status.toolhead.is_printing)
name: "Move Z:%05.1f" % input
input: status.gcode.move_zpos
input_min: 0
input_max: 200.0
input_step: 10.0
gcode:
    G90
    G1 Z{'%.1f' % input}

[menu __control __move_10mm __axis_e]
type: input
enable: (not status.toolhead.is_printing)
name: "Move E:{:+06.1f}".format(input)
input: 0
input_min: -50.0
input_max: 50.0
input_step: 10.0
gcode:
    M83
    G1 E{'%.1f' % input} F240

### menu move 1mm ###
[menu __control __move_1mm]
type: list
enable: (not status.toolhead.is_printing)
name: "Move 1mm"
items:
    .__axis_z
    .__axis_x, .__axis_y
    .__axis_e

[menu __control __move_1mm __axis_x]
type: input
name: "X:{%05.1f} " % input
input: status.gcode.move_xpos
input_min: 0
input_max: 200.0
input_step: 1.0
gcode:
    G90
    G1 X{'%.1f' % input}

[menu __control __move_1mm __axis_y]
type: input
name: "Y:{%05.1f} " % input
input: status.gcode.move_ypos
input_min: 0
input_max: 200.0
input_step: 1.0
gcode:
    G90
    G1 Y{'%.1f' % input}

[menu __control __move_1mm __axis_z]
type: input
enable: (not status.toolhead.is_printing)
name: "Move Z:{%05.1f}" % input
input: status.gcode.move_zpos
input_min: 0
input_max: 200.0
input_step: 1.0
gcode:
    G90
    G1 Z{'%.1f' % input}

[menu __control __move_1mm __axis_e]
type: input
enable: (not status.toolhead.is_printing)
name: "Move E:{:+06.1f}".format(input)
input: 0
input_min: -50.0
input_max: 50.0
input_step: 1.0
gcode:
    M83
    G1 E{'%.1f' % input} F240

### menu move 0.1mm ###
[menu __control __move_01mm]
type: list
enable: (not status.toolhead.is_printing)
name: "Move 0.1mm"
items:
    .__axis_z
    .__axis_x, .__axis_y
    .__axis_e

[menu __control __move_01mm __axis_x]
type: input
name: "X:{%05.1f} " % input
input: status.gcode.move_xpos
input_min: 0
input_max: 200.0
input_step: 0.1
gcode:
    G90
    G1 X{'%.1f' % input}

[menu __control __move_01mm __axis_y]
type: input
name: "Y:{%05.1f} " % input
input: status.gcode.move_ypos
input_min: 0
input_max: 200.0
input_step: 0.1
gcode:
    G90
    G1 Y{'%.1f' % input}

[menu __control __move_01mm __axis_z]
type: input
enable: (not status.toolhead.is_printing)
name: "Move Z:{:05.1f}".format(input)
input: status.gcode.move_zpos
input_min: 0
input_max: 200.0
input_step: 0.1
gcode:
    G90
    G1 Z{'%.1f' % input}

[menu __control __move_01mm __axis_e]
type: input
enable: (not status.toolhead.is_printing)
name: "Move E:{:+06.1f}".format(input)
input: 0
input_min: -50.0
input_max: 50.0
input_step: 0.1
gcode:
    M83
    G1 E{'%.1f' % input} F240

### menu temperature ###
[menu __temp]
type: list
name: "Temperature"
items:
    .__hotend0_current, .__hotend0_target
    .__hotend1_current, .__hotend1_target
    .__hotbed_current, .__hotbed_target
    .__preheat_pla
    .__preheat_abs
    .__cooldown

[menu __temp __hotend0_current]
type: item
enable: ('extruder0' in status)
name: "Ex0:{%4.0f} T" % status.extruder0.heater.temperature

[menu __temp __hotend0_target]
type: input
enable: ('extruder0' in status)
name: "{%4.0f}" % input
input: status.extruder0.target
input_min: 0
input_max: 250
input_step: 1
input_step2: 10
gcode: M104 T0 S{'%.0f' % input}

[menu __temp __hotend1_current]
type: item
enable: ('extruder1' in status)
name: "Ex1:{%4.0f} T" % status.extruder1.heater.temperature

[menu __temp __hotend1_target]
type: input
enable: ('extruder1' in status)
name: "{%4.0f}" % input
input: status.extruder1.heater.target
input_min: 0
input_max: 250
input_step: 1
input_step2: 10
gcode: M104 T1 S{'%.0f' % input}

[menu __temp __hotbed_current]
type: item
enable: ('heater_bed' in status)
name: "Bed:{%4.0f} T" % status.heater_bed.temperature

[menu __temp __hotbed_target]
type: input
enable: ('heater_bed' in status)
name: "{%4.0f}" % input
input: status.heater_bed.target
input_min: 0
input_max: 130
input_step: 1
input_step2: 10
gcode: M140 S{'%.0f' % input}

[menu __temp __preheat_pla]
type: list
name: "Preheat PLA"
items:
    .__all
    .__hotend
    .__hotbed

[menu __temp __preheat_pla __all]
type: command
enable: ('extruder0' in status) and ('heater_bed' in status)
name: "Preheat all"
gcode:
    M140 S60
    M104 S200

[menu __temp __preheat_pla __hotend]
type: command
enable: ('extruder0' in status)
name: "Preheat hotend"
gcode: M104 S200

[menu __temp __preheat_pla __hotbed]
type: command
enable: ('heater_bed' in status)
name: "Preheat hotbed"
gcode: M140 S60

[menu __temp __preheat_abs]
type: list
name: "Preheat ABS"
items:
    .__all
    .__hotend
    .__hotbed

[menu __temp __preheat_abs __all]
type: command
enable: ('extruder0' in status) and ('heater_bed' in status)
name: "Preheat all"
gcode:
    M140 S110
    M104 S245

[menu __temp __preheat_abs __hotend]
type: command
enable: ('extruder0' in status)
name: "Preheat hotend"
gcode: M104 S245

[menu __temp __preheat_abs __hotbed]
type: command
enable: ('heater_bed' in status)
name: "Preheat hotbed"
gcode: M140 S110

[menu __temp __cooldown]
type: list
name: "Cooldown"
items:
    .__all
    .__hotend
    .__hotbed

[menu __temp __cooldown __all]
type: command
enable: ('extruder0' in status) and ('heater_bed' in status)
name: "Cooldown all"
gcode:
    M104 S0
    M140 S0

[menu __temp __cooldown __hotend]
type: command
enable: ('extruder0' in status)
name: "Cooldown hotend"
gcode: M104 S0

[menu __temp __cooldown __hotbed]
type: command
enable: ('heater_bed' in status)
name: "Cooldown hotbed"
gcode: M140 S0

### menu filament ###

[menu __filament]
type: list
name: "Filament"
items:
    __temp __hotend0_current, __temp __hotend0_target
    .__unload
    .__load
    .__feed

[menu __filament __load]
type: command
name: "Load Filament"
gcode:
    M83
    G1 E50 F1000
    G1 E50 F1000
    G1 E50 F1000
    G1 E50 F1000
    G1 E50 F300
    G1 E50 F300
    M82

[menu __filament __unload]
type: command
name: "Unload Filament"
gcode:
    M83
    G1 E-50 F1000
    G1 E-50 F1000
    G1 E-50 F1000
    G1 E-50 F1000
    G1 E-50 F1800
    G1 E-50 F1800
    G1 E-50 F1800
    G1 E-50 F1800
    M82

[menu __filament __feed]
type: input
name: "Feed Filament: %.1f" % input
input: 0
input_step: 0.1
gcode:
    M83
    G1 E{'%.1f' % input} F30

### menu prepare ###
[menu __prepare]
type: list
enable: (not status.toolhead.is_printing)
name: "Prepare"
items:
    .__delta_calib
    .__bedprobe
    .__hotend_pid_tuning
    .__hotbed_pid_tuning
    .__host_restart
    .__firmware_restart

[menu __prepare __host_restart]
type: command
enable: (not status.toolhead.is_printing)
name: "Restart host"
gcode: RESTART

[menu __prepare __firmware_restart]
type: command
enable: (not status.toolhead.is_printing)
name: "Restart FW"
gcode: FIRMWARE_RESTART

[menu __prepare __delta_calib]
type: command
enable: (not status.toolhead.is_printing)
name: "Delta calibrate"
gcode: DELTA_CALIBRATE

[menu __prepare __bedprobe]
type: command
enable: (not status.toolhead.is_printing)
name: "Bed probe"
gcode: PROBE

[menu __prepare __hotend_pid_tuning]
type: command
enable: (not status.toolhead.is_printing) and ('extruder0' in status)
name: "Tune Hotend PID"
gcode: PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __prepare __hotbed_pid_tuning]
type: command
enable: (not status.toolhead.is_printing) and ('heater_bed' in status)
name: "Tune Hotbed PID"
gcode: PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

### test menu ###
[menu __test]
type: list
name: "Test menu"
items:
    .__scroll
    .__dump

[menu __test __scroll]
type: item
name: "This is very long item name"
width: 18
scroll: true

[menu __test __dump]
type: command
name: "Dump parameters"
gcode: MENU DO=dump

### info screens ###
[menu __screen2004_static]
type: deck
name: "Deck (static)"
longpress_menu: __main
items: __card2004_static

[menu __screen2004_input]
type: deck
name: "Deck (input)"
longpress_menu: __main
items: __card2004_input

[menu __screen1604_static]
type: deck
name: "Deck (static)"
longpress_menu: __main
items: __card1604_static

[menu __screen1604_input]
type: deck
name: "Deck (input)"
longpress_menu: __main
items: __card1604_input

[menu __screen_test]
type: deck
name: "Deck (test)"
longpress_menu: __main
items: __card1, __card2, __card3

### deck cards ###

### special characters for hd44780
# \x00 - thermometer
# \x01 - heater_bed
# \x02 - speed_factor
# \x03 - clock
# \x04 - degrees
# \x05 - usb
# \x06 - sdcard
# \x07 - fan
# \x7e - right arrow

[menu __card2004_static]
type: card
name: "Card 20x04"
content_a: "\x00{0:3s}\x04\x7e{1:3s}\x04   {2}".format(*items())
content_b: "\x01{3:3s}\x04\x7e{4:3s}\x04   \xa5{8}".format(*items())
content_c: "\x07{6}  \x02{5} {7}".format(*items())
content_d: "{9}".format(*items())
items:
    __card_hotend0_current
    __card_hotend0_target
    __card_zpos
    __card_hotbed_current
    __card_hotbed_target
    __card_frpeed
    __card_fnspeed
    5,__card_prt_time, __card_usb_progress, __card_sdcard_progress
    __card_status
    __card_msg,__card_xpos|__card_ypos|__card_epos

[menu __card1604_static]
type: card
name: "Card 16x04"
content_0: "E{0:3s}/{1:3s} {2}".format(*items())
content_1: "B{3:3s}/{4:3s} fr{5}".format(*items())
content_2: "fn{6}   {7}".format(*items())
content_3: "[{8}] {9}".format(*items())
items:
    __card_hotend0_current
    __card_hotend0_target
    __card_zpos
    __card_hotbed_current
    __card_hotbed_target
    __card_frpeed
    __card_fnspeed
    5,__card_prt_time_2, __card_usb_progress_2, __card_sdcard_progress_2
    __card_status_slim
    __card_msg_slim,__card_xpos|__card_ypos

[menu __card2004_input]
type: card
name: "Card 20x04"
content_a: "\x00{0:3s}\x04\x7e{1:3s}\x04   {2}".format(*items())
content_b: "\x01{3:3s}\x04\x7e{4:3s}\x04   \xa5{8}".format(*items())
content_c: "\x07{6}  \x02{5} {7}".format(*items())
content_d: "{9}".format(*items())
items:
    __card_hotend0_current
    __card_hotend0_target_in
    __card_zpos
    __card_hotbed_current
    __card_hotbed_target_in
    __card_frpeed_in
    __card_fnspeed
    5,__card_prt_time, __card_usb_progress, __card_sdcard_progress
    __card_status
    __card_msg,__card_xpos|__card_ypos|__card_epos

[menu __card1604_input]
type: card
name: "Card 16x04"
content_0: "E{0:3s}/{1:3s} {2}".format(*items())
content_1: "B{3:3s}/{4:3s} fr{5}".format(*items())
content_2: "fn{6}   {7}".format(*items())
content_3: "[{8}] {9}".format(*items())
items:
    __card_hotend0_current
    __card_hotend0_target_in
    __card_zpos
    __card_hotbed_current
    __card_hotbed_target_in
    __card_frpeed_in
    __card_fnspeed
    5,__card_prt_time_2, __card_usb_progress_2, __card_sdcard_progress_2
    __card_status_slim
    __card_msg,__card_xpos|__card_ypos

[menu __card1]
type: card
name: "Card 1"
content_0: "E0:{0:3s}/{1:3s} B:{4:3s}/{5:3s}".format(*items())
content_1: "E1:{2:3s}/{3:3s} {6}".format(*items())
content_2: "Fr{7}Fn{8} {9}".format(*items())
content_3: "{10}".format(*items())

items:
    __card_hotend0_current
    __card_hotend0_target
    __card_hotend1_current
    __card_hotend1_target
    __card_hotbed_current
    __card_hotbed_target
    __card_zpos
    __card_frpeed_in
    __card_fnspeed_in
    5,__card_prt_time, __card_usb_progress, __card_sdcard_progress
    __card_msg

[menu __card2]
type: card
name: "Card 2"
content_0: "E:{0:3s}/{1:3s} B:{2:3s}/{3:3s}".format(*items())
content_1: "{4}{5}{6}".format(*items())
content_2: "Fr{7} {8} T{9}".format(*items())
content_3: "{10}".format(*items())
items:
    __card_hotend0_current
    __card_hotend0_target
    __card_hotbed_current
    __card_hotbed_target
    __card_xpos
    __card_ypos
    __card_zpos
    __card_frpeed_in
    __card_usb_progress_2, __card_sdcard_progress_2
    __card_prt_time_2
    __card_msg

[menu __card3]
type: card
name: "Card 3"
content_0: "Example card :)"
content_1: "Try this menu."
content_2: "(%s)" % items('__test')

### card items ###

[menu __card_hotend0_current]
type: item
enable: ('extruder0' in status)
name: "%3.0f" % status.extruder0.heater.temperature

[menu __card_hotend0_target]
type: item
enable: ('extruder0' in status)
name: "%3.0f" % status.extruder0.heater.target

[menu __card_hotend0_target_in]
type: input
enable: ('extruder0' in status)
name: "%3.0f" % input
input: status.extruder0.heater.target
input_min: 0
input_max: 250
input_step: 1
gcode: M104 T0 S{'%.0f' % input}

[menu __card_hotend1_current]
type: item
enable: ('extruder1' in status)
name: "%3.0f" % status.extruder1.heater.temperature

[menu __card_hotend1_target]
type: item
enable: ('extruder1' in status)
name: "%3.0f" % status.extruder1.heater.target

[menu __card_hotend1_target_in]
type: input
enable: ('extruder1' in status)
name: "%3.0f" % input
input: status.extruder1.heater.target
input_min: 0
input_max: 250
input_step: 1
gcode: M104 T1 S{'%.0f' % input}

[menu __card_hotbed_current]
type: item
enable: ('heater_bed' in status)
name: "%3.0f" % status.heater_bed.temperature

[menu __card_hotbed_target]
type: item
enable: ('heater_bed' in status)
name: "%3.0f" % status.heater_bed.target

[menu __card_hotbed_target_in]
type: input
enable: ('heater_bed' in status)
name: "%3.0f" % input
input: status.heater_bed.target
input_min: 0
input_max: 250
input_step: 1
gcode: M140 S{'%.0f' % input}

[menu __card_zpos]
type: item
name: "Z%06.2f" % status.toolhead.zpos

[menu __card_xpos]
type: item
name: "X%05.1f%s" % (status.toolhead.xpos, (' ' if status.menu.is20xx else ''))

[menu __card_ypos]
type: item
name: "Y%05.1f%s" % (status.toolhead.ypos, (' ' if status.menu.is20xx else ''))

[menu __card_epos]
type: item
name: "E%05.1f%s" % (status.toolhead.epos, (' ' if status.menu.is20xx else ''))

[menu __card_frpeed]
type: item
name: "{:4.0%}".format(status.gcode.speed_factor)

[menu __card_fnspeed]
type: item
name: "{:4.0%}".format(status.fan.speed)

[menu __card_frpeed_in]
type: input
name: "{:4.0%}".format(input)
input: status.gcode.speed_factor
input_min: 0
input_max: 1
input_step: 0.01
gcode: M220 S{'%d' % lerp(input, 0, 1, 0, 255)}

[menu __card_fnspeed_in]
type: input
enable: ('fan' in status)
name: "{:4.0%}".format(input)
input: status.fan.speed
input_min: 0
input_max: 1
input_step: 0.01
gcode: M106 S{'%d' % lerp(input, 0, 1, 0, 255)}

[menu __card_prt_time]
type: item
name: "\x03%02d:%02d" % (s2mins(status.toolhead.printing_time), s2secs(status.toolhead.printing_time))

[menu __card_prt_time_2]
type: item
name: "T%02d:%02d" % (s2mins(status.toolhead.printing_time), s2secs(status.toolhead.printing_time))

[menu __card_usb_progress]
type: item
enable: ('virtual_sdcard' not in status) and ((not status.virtual_sdcard.progress) and (status.display.progress))
name: "\x05{0:3.0f}%".format(status.display.progress)

[menu __card_sdcard_progress]
type: item
enable: ('virtual_sdcard' in status) and (status.virtual_sdcard.progress)
name: "\x06{0:3.0f}%".format(status.virtual_sdcard.progress)

[menu __card_usb_progress_2]
type: item
#enable: !virtual_sdcard.progress,display.progress
name: "pr{0:3.0f}%".format(status.display.progress)

[menu __card_sdcard_progress_2]
type: item
enable: ('virtual_sdcard' in status) and (status.virtual_sdcard.progress)
name: "pr{0:3.0f}%".format(status.virtual_sdcard.progress)

[menu __card_msg]
enable: status.display.message
type: item
scroll: true
width: 20
name: "{}".format(status.display.message)

[menu __card_msg_slim]
enable: status.display.message
type: item
scroll: true
width: 12
name: "{}".format(status.display.message)

[menu __card_status]
type: item
name: "{}".format(status.toolhead.status)
width: 5

[menu __card_status_slim]
type: item
name: "{}".format(status.toolhead.status)
width: 1
