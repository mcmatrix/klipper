# This file serves as default menu structure.
# See the "example-menu.cfg" file for description of common config parameters.

### DEFAULT MENU ###

### menu main ###
[menu __main]
type: list
name: Main Menu
items:
    __tune
    __octoprint
    __sdcard
    __control
    __temp
    __filament
    __prepare
    __test

### menu tune ###
[menu __tune]
type: list
enable: {printer.idle_timeout.state == "Printing"}
name: Tune
items:
    .__speed
    .__flow
    .__offsetz

[menu __tune __speed]
type: input
name: Speed: {'%3d' % (input*100)}%
input: {printer.gcode.speed_factor}
input_min: 0
input_max: 2
input_step: 0.01
realtime: true
gcode: M220 S{'%d' % (input*100)}

[menu __tune __flow]
type: input
name: Flow: {'%3d' % (input*100)}%
input: {printer.gcode.extrude_factor}
input_min: 0
input_max: 2
input_step: 0.01
realtime: true
gcode: M221 S{'%d' % (input*100)}

[menu __tune __offsetz]
type: input
name: Offset Z:{'%05.3f' % input}
input: {printer.gcode.homing_zpos}
input_min: -5
input_max: 5
input_step: 0.005
realtime: true
gcode: SET_GCODE_OFFSET Z={'%.3f' % input}

### menu octoprint ###
[menu __octoprint]
type: list
name: OctoPrint
items:
    .__pause
    .__resume
    .__abort

[menu __octoprint __pause]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Pause printing
gcode:
    {printer.gcode.action_respond_info('action:pause')}

[menu __octoprint __resume]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Resume printing
gcode:
    {printer.gcode.action_respond_info('action:resume')}

[menu __octoprint __abort]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Abort printing
gcode:
    {printer.gcode.action_respond_info('action:cancel')}

### menu virtual sdcard ###
[menu __sdcard]
type: vsdcard
name: SD Card
items:
    .__start
    .__resume
    .__pause

[menu __sdcard __start]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Start printing
gcode: M24

[menu __sdcard __resume]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Resume printing
gcode: M24

[menu __sdcard __pause]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Pause printing
gcode: M25

### menu control ###
[menu __control]
type: list
name: Control
items:
    .__home
    .__homez
    .__homexy
    .__move_10mm
    .__move_1mm
    .__move_01mm
    .__disable
    .__fanonoff
    .__fanspeed
    .__caselightonoff
    .__caselightpwm

[menu __control __home]
type: command
name: Home All
gcode: G28
enable: {not printer.idle_timeout.state == "Printing"}

[menu __control __homez]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home Z
gcode: G28 Z

[menu __control __homexy]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home X/Y
gcode: G28 X Y

[menu __control __disable]
type: command
name: Disable steppers
gcode:
    M84
    M18

[menu __control __fanonoff]
type: input
enable: {'fan' in printer}
name: Fan {'ON ' if input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 1
gcode: M106 S{255 if input else 0}

[menu __control __fanspeed]
type: input
enable: {'fan' in printer}
name: Fan speed: {'%3d' % (input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode: M106 S{'%d' % (input*255)}

[menu __control __caselightonoff]
type: input
enable: {'output_pin caselight' in printer}
name: Case light: {'ON ' if input else 'OFF'}
input: {printer['output_pin caselight'].value}
input_min: 0
input_max: 1
input_step: 1
gcode: SET_PIN PIN=caselight VALUE={1 if input else 0}

[menu __control __caselightpwm]
type: input
enable: {'output_pin caselight' in printer}
name: Case light: {'%3d' % (input*100)}%
input: {printer['output_pin caselight'].value}
input_min: 0.0
input_max: 1.0
input_step: 0.01
gcode: SET_PIN PIN=caselight VALUE={input}

### menu move 10mm ###
[menu __control __move_10mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 10mm
items:
    .__axis_z
    .__axis_x, .__axis_y
    .__axis_e

[menu __control __move_10mm __axis_x]
type: input
name: X:{'%05.1f ' % input}
input: {printer.toolhead.position.x}
input_min: 0
input_max: 200.0
input_step: 10.0
gcode:
    G90
    G1 X{input}

[menu __control __move_10mm __axis_y]
type: input
name: Y:{'%05.1f ' % input}
input: {printer.toolhead.position.y}
input_min: 0
input_max: 200.0
input_step: 10.0
gcode:
    G90
    G1 Y{input}

[menu __control __move_10mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % input}
input: {printer.toolhead.position.z}
input_min: 0
input_max: 200.0
input_step: 10.0
gcode:
    G90
    G1 Z{input}

[menu __control __move_10mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % input}
input: 0
input_min: -50.0
input_max: 50.0
input_step: 10.0
gcode:
    M83
    G1 E{input} F240

### menu move 1mm ###
[menu __control __move_1mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 1mm
items:
    .__axis_z
    .__axis_x, .__axis_y
    .__axis_e

[menu __control __move_1mm __axis_x]
type: input
name: X:{'%05.1f ' % input}
input: {printer.toolhead.position.x}
input_min: 0
input_max: 200.0
input_step: 1.0
gcode:
    G90
    G1 X{input}

[menu __control __move_1mm __axis_y]
type: input
name: Y:{'%05.1f ' % input}
input: {printer.toolhead.position.y}
input_min: 0
input_max: 200.0
input_step: 1.0
gcode:
    G90
    G1 Y{input}

[menu __control __move_1mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % input}
input: {printer.toolhead.position.z}
input_min: 0
input_max: 200.0
input_step: 1.0
gcode:
    G90
    G1 Z{input}

[menu __control __move_1mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % input}
input: 0
input_min: -50.0
input_max: 50.0
input_step: 1.0
gcode:
    M83
    G1 E{input} F240

### menu move 0.1mm ###
[menu __control __move_01mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 0.1mm
items:
    .__axis_z
    .__axis_x, .__axis_y
    .__axis_e

[menu __control __move_01mm __axis_x]
type: input
name: X:{'%05.1f ' % input}
input: {printer.toolhead.position.x}
input_min: 0
input_max: 200.0
input_step: 0.1
gcode:
    G90
    G1 X{input}

[menu __control __move_01mm __axis_y]
type: input
name: Y:{'%05.1f ' % input}
input: {printer.toolhead.position.y}
input_min: 0
input_max: 200.0
input_step: 0.1
gcode:
    G90
    G1 Y{input}

[menu __control __move_01mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % input}
input: {printer.toolhead.position.z}
input_min: 0
input_max: 200.0
input_step: 0.1
gcode:
    G90
    G1 Z{input}

[menu __control __move_01mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % input}
input: 0
input_min: -50.0
input_max: 50.0
input_step: 0.1
gcode:
    M83
    G1 E{input} F240

### menu temperature ###
[menu __temp]
type: list
name: Temperature
items:
    .__hotend0_current, .__hotend0_target
    .__hotend1_current, .__hotend1_target
    .__hotbed_current, .__hotbed_target
    .__preheat_pla
    .__preheat_abs
    .__cooldown

[menu __temp __hotend0_current]
type: item
enable: {'extruder0' in printer}
name: Ex0:{'%4.0f T' % printer.extruder0.temperature}

[menu __temp __hotend0_target]
type: input
enable: {'extruder0' in printer}
name: {"%4.0f" % input}
input: {printer.extruder0.target}
input_min: 0
input_max: 250
input_step: 1
input_step2: 10
gcode: M104 T0 S{'%.0f' % input}

[menu __temp __hotend1_current]
type: item
enable: {'extruder1' in printer}
name: Ex1:{'%4.0f T' % printer.extruder1.temperature}

[menu __temp __hotend1_target]
type: input
enable: {'extruder1' in printer}
name: {"%4.0f" % input}
input: {printer.extruder1.target}
input_min: 0
input_max: 250
input_step: 1
input_step2: 10
gcode: M104 T1 S{'%.0f' % input}

[menu __temp __hotbed_current]
type: item
enable: {'heater_bed' in printer}
name: Bed:{'%4.0f T' % printer.heater_bed.temperature}

[menu __temp __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"%4.0f" % input}
input: {printer.heater_bed.target}
input_min: 0
input_max: 130
input_step: 1
input_step2: 10
gcode: M140 S{'%.0f' % input}

[menu __temp __preheat_pla]
type: list
name: Preheat PLA
items:
    .__all
    .__hotend
    .__hotbed

[menu __temp __preheat_pla __all]
type: command
enable: {('extruder0' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S60
    M104 S200

[menu __temp __preheat_pla __hotend]
type: command
enable: {'extruder0' in printer}
name: Preheat hotend
gcode: M104 S200

[menu __temp __preheat_pla __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S60

[menu __temp __preheat_abs]
type: list
name: Preheat ABS
items:
    .__all
    .__hotend
    .__hotbed

[menu __temp __preheat_abs __all]
type: command
enable: {('extruder0' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S110
    M104 S245

[menu __temp __preheat_abs __hotend]
type: command
enable: {'extruder0' in printer}
name: Preheat hotend
gcode: M104 S245

[menu __temp __preheat_abs __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S110

[menu __temp __cooldown]
type: list
name: Cooldown
items:
    .__all
    .__hotend
    .__hotbed

[menu __temp __cooldown __all]
type: command
enable: {('extruder0' in printer) and ('heater_bed' in printer)}
name: Cooldown all
gcode:
    M104 S0
    M140 S0

[menu __temp __cooldown __hotend]
type: command
enable: {'extruder0' in printer}
name: Cooldown hotend
gcode: M104 S0

[menu __temp __cooldown __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Cooldown hotbed
gcode: M140 S0

### menu filament ###

[menu __filament]
type: list
name: Filament
items:
    __temp __hotend0_current, __temp __hotend0_target
    .__unload
    .__load
    .__feed

[menu __filament __load]
type: command
name: Load Filament
gcode:
    M83
    G1 E50 F1000
    G1 E50 F1000
    G1 E50 F1000
    G1 E50 F1000
    G1 E50 F300
    G1 E50 F300
    M82

[menu __filament __unload]
type: command
name: Unload Filament
gcode:
    M83
    G1 E-50 F1000
    G1 E-50 F1000
    G1 E-50 F1000
    G1 E-50 F1000
    G1 E-50 F1800
    G1 E-50 F1800
    G1 E-50 F1800
    G1 E-50 F1800
    M82

[menu __filament __feed]
type: input
name: Feed: {'%.1f' % input}
input: 0
input_step: 0.1
gcode:
    M83
    G1 E{'%.1f' % input} F30

### menu prepare ###
[menu __prepare]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Prepare
items:
    .__delta_calib
    .__bedprobe
    .__hotend_pid_tuning
    .__hotbed_pid_tuning
    .__host_restart
    .__firmware_restart

[menu __prepare __host_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart host
gcode: RESTART

[menu __prepare __firmware_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart FW
gcode: FIRMWARE_RESTART

[menu __prepare __delta_calib]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Delta calibrate
gcode: DELTA_CALIBRATE

[menu __prepare __bedprobe]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Bed probe
gcode: PROBE

[menu __prepare __hotend_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder0' in printer)}
name: Tune Hotend PID
gcode: PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __prepare __hotbed_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: Tune Hotbed PID
gcode: PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

### test menu ###
[menu __test]
type: list
name: Test menu
items:
    .__scroll
    .__dump

[menu __test __scroll]
type: item
name: This is very long item name
width: 18
scroll: true

[menu __test __dump]
type: command
name: Dump parameters
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { printer.gcode.action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { printer.gcode.action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

### info screens ###
[menu __screen2004_static]
type: deck
name: Deck (static)
longpress_menu: __main
items: __card2004_static

[menu __screen2004_input]
type: deck
name: Deck (input)
longpress_menu: __main
items: __card2004_input

[menu __screen1604_static]
type: deck
name: Deck (static)
longpress_menu: __main
items: __card1604_static

[menu __screen1604_input]
type: deck
name: Deck (input)
longpress_menu: __main
items: __card1604_input

[menu __screen_test]
type: deck
name: Deck (test)
longpress_menu: __main
items: __card1, __card2, __card3

### deck cards ###

### special characters for hd44780
# \x00 - ~extruder~
# \x01 - ~bed~
# \x02 - ~feedrate~
# \x03 - ~clock~
# \x04 - ~degrees~
# \x05 - ~usb~
# \x06 - ~sd~
# \x07 - ~fan~
# \x7e - ~right_arrow~

### 16x16 icons for graphical display
# ~extruder~
# ~bed~
# ~bed_heat1~
# ~bed_heat2~
# ~fan1~
# ~fan2~
# ~feedrate~

[menu __card2004_static]
type: card
name: Card 20x04
content_a: "~extruder~{__card_hotend0_current}~degrees~~right_arrow~{__card_hotend0_target}~degrees~   {__card_zpos}"
content_b: "~bed~{__card_hotbed_current}~degrees~~right_arrow~{__card_hotbed_target}~degrees~   \xa5{__card_status}"
content_c: "~fan~{__card_fnspeed}  ~feedrate~{__card_frpeed} {items.0}"
content_d: "{items.1}"
items:
    5,__card_prt_time_hm|__card_prt_time_ms, __card_usb_progress, __card_sdcard_progress
    __card_msg,__card_xpos|__card_ypos|__card_epos

[menu __card1604_static]
type: card
name: Card 16x04
content_0: "~extruder~{__card_hotend0_current}/{__card_hotend0_target} {__card_zpos}"
content_1: "~{seq(['bed','bed_heat1','bed_heat2'], (('heater_bed' in printer) and printer.heater_bed.target), 1)}~{__card_hotbed_current}/{__card_hotbed_target} ~feedrate~{__card_frpeed}"
content_2: "~{seq(['fan1','fan2'], (('fan' in printer) and printer.fan.speed))}~{__card_fnspeed}   {items.0}"
content_3: "[{__card_status_slim}] {items.1}"
items:
    5,__card_prt_time_2_hm|__card_prt_time_2_ms, __card_usb_progress_2, __card_sdcard_progress_2
    __card_msg_slim,__card_xpos|__card_ypos

[menu __card2004_input]
type: card
name: Card 20x04
content_a: "~extruder~{__card_hotend0_current}~degrees~~right_arrow~{__card_hotend0_target_in}~degrees~   {__card_zpos}"
content_b: "~bed~{__card_hotbed_current}~degrees~~right_arrow~{__card_hotbed_target_in}~degrees~   \xa5{__card_status}"
content_c: "~fan~{__card_fnspeed}  ~feedrate~{__card_frpeed_in} {items.0}"
content_d: "{items.1}"
items:
    5,__card_prt_time_hm|__card_prt_time_ms, __card_usb_progress, __card_sdcard_progress
    __card_msg,__card_xpos|__card_ypos|__card_epos

[menu __card1604_input]
type: card
name: Card 16x04
content_0: "E{items[0]}/{items[1]} {items[2]}"
content_1: "B{items[3]}/{items[4]} fr{items[5]}"
content_2: "fn{items.6}   {items.7}"
content_3: "[{items.8}] {items.9}"
items:
    __card_hotend0_current
    __card_hotend0_target_in
    __card_zpos
    __card_hotbed_current
    __card_hotbed_target_in
    __card_frpeed_in
    __card_fnspeed
    5,__card_prt_time_2_hm|__card_prt_time_2_ms, __card_usb_progress_2, __card_sdcard_progress_2
    __card_status_slim
    __card_msg,__card_xpos|__card_ypos

[menu __card1]
type: card
name: Card 1
content_0: "E0:{items.0}/{items.1} B:{items.4}/{items.5}"
content_1: "E1:{items.2}/{items.3} {items.6}"
content_2: "Fr{items.7}Fn{items.8} {items.9}"
content_3: "{items.10}"
items:
    __card_hotend0_current
    __card_hotend0_target
    __card_hotend1_current
    __card_hotend1_target
    __card_hotbed_current
    __card_hotbed_target
    __card_zpos
    __card_frpeed_in
    __card_fnspeed_in
    5,__card_prt_time_hm|__card_prt_time_ms, __card_usb_progress, __card_sdcard_progress
    __card_msg

[menu __card2]
type: card
name: Card 2
content_0: "E:{items[0]}/{items[1]} B:{items[2]}/{items[3]}"
content_1: "{items[4]}{items[5]}{items[6]}"
content_2: "Fr{items[7]} {items[8]} T{items[9]}"
content_3: "{items[10]}"
items:
    __card_hotend0_current
    __card_hotend0_target
    __card_hotbed_current
    __card_hotbed_target
    __card_xpos
    __card_ypos
    __card_zpos
    __card_frpeed_in
    __card_usb_progress_3, __card_sdcard_progress_2
    __card_prt_time_2_hm|__card_prt_time_2_ms
    __card_msg

[menu __card3]
type: card
name: Card 3
content_0: Example card :)
content_1: Try this menu.
content_2: [{__test}]

### card items ###

[menu __card_hotend0_current]
type: item
enable: {'extruder0' in printer}
name: {"%3d" % printer.extruder0.temperature}

[menu __card_hotend0_target]
type: item
enable: {'extruder0' in printer}
name: {"%3d" % printer.extruder0.target}

[menu __card_hotend0_target_in]
type: input
enable: {'extruder0' in printer}
name: {"%3d" % input}
input: {printer.extruder0.target}
input_min: 0
input_max: 250
input_step: 1
gcode: M104 T0 S{'%d' % input}

[menu __card_hotend1_current]
type: item
enable: {'extruder1' in printer}
name: {"%3d" % printer.extruder1.temperature}

[menu __card_hotend1_target]
type: item
enable: {'extruder1' in printer}
name: {"%3d" % printer.extruder1.target}

[menu __card_hotend1_target_in]
type: input
enable: {'extruder1' in printer}
name: {"%3d" % input}
input: {printer.extruder1.target}
input_min: 0
input_max: 250
input_step: 1
gcode: M104 T1 S{'%d' % input}

[menu __card_hotbed_current]
type: item
enable: {'heater_bed' in printer}
name: {"%3d" % printer.heater_bed.temperature}

[menu __card_hotbed_target]
type: item
enable: {'heater_bed' in printer}
name: {"%3d" % printer.heater_bed.target}

[menu __card_hotbed_target_in]
type: input
enable: {'heater_bed' in printer}
name: {"%3d" % input}
input: {printer.heater_bed.target}
input_min: 0
input_max: 250
input_step: 1
gcode: M140 S{'%d' % input}

[menu __card_zpos]
type: item
name: Z{"%0*.*f" % ((6 if printer.menu.cols > 16 else 5), (2 if printer.menu.cols > 16 else 1), printer.toolhead.position.z)}

[menu __card_xpos]
type: item
name: X{"%05.1f%s" % (printer.toolhead.position.x, (' ' if printer.menu.cols > 16 else ''))}

[menu __card_ypos]
type: item
name: Y{"%05.1f%s" % (printer.toolhead.position.y, (' ' if printer.menu.cols > 16 else ''))}

[menu __card_epos]
type: item
name: E{"%05.1f%s" % (printer.toolhead.position.e, (' ' if printer.menu.cols > 16 else ''))}

[menu __card_frpeed]
type: item
name: {"%3d%%" % (100.0 * printer.gcode.speed_factor)}

[menu __card_fnspeed]
type: item
name: {'%3d%%' % (100.0 * printer.fan.speed)}

[menu __card_frpeed_in]
type: input
name: {"%3d%%" % (100.0 * input)}
input: {printer.gcode.speed_factor}
input_min: 0
input_max: 1
input_step: 0.01
gcode: M220 S{'%d' % (input*255)}

[menu __card_fnspeed_in]
type: input
enable: {'fan' in printer}
name: {"%3d%%" % (100.0 * input)}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode: M106 S{'%d' % (input*255)}

[menu __card_prt_time_ms]
type: item
enable: {s2hours(printer.toolhead.printing_time) == 0}
name: ~clock~{"%02dm%02ds" % (s2mins(printer.toolhead.printing_time), s2secs(printer.toolhead.printing_time))}

[menu __card_prt_time_hm]
type: item
enable: {s2hours(printer.toolhead.printing_time) > 0}
name: ~clock~{"%02dh%02dm" % (s2hours(printer.toolhead.printing_time), s2mins(printer.toolhead.printing_time))}

[menu __card_prt_time_2_ms]
type: item
enable: {s2hours(printer.toolhead.printing_time) == 0}
name: T{"%02dm%02ds" % (s2mins(printer.toolhead.printing_time), s2secs(printer.toolhead.printing_time))}

[menu __card_prt_time_2_hm]
type: item
enable: {s2hours(printer.toolhead.printing_time) > 0}
name: T{"%02dh%02dm" % (s2hours(printer.toolhead.printing_time), s2mins(printer.toolhead.printing_time))}

[menu __card_usb_progress]
type: item
enable: {('virtual_sdcard' not in printer) and ((not printer.virtual_sdcard.progress) and (printer.display.progress))}
name: ~usb~{"%3d" % printer.display.progress}%

[menu __card_sdcard_progress]
type: item
enable: {('virtual_sdcard' in printer) and (printer.virtual_sdcard.progress)}
name: ~sd~{"%3d" % printer.virtual_sdcard.progress}%

[menu __card_usb_progress_2]
type: item
enable: {('virtual_sdcard' not in printer) and ((not printer.virtual_sdcard.progress) and (printer.display.progress))}
name: pr{"%3d" % printer.display.progress}%

[menu __card_usb_progress_3]
type: item
name: pr{"%3d" % printer.display.progress}%

[menu __card_sdcard_progress_2]
type: item
enable: {('virtual_sdcard' in printer) and (printer.virtual_sdcard.progress)}
name: pr{"%3d" % printer.virtual_sdcard.progress}%

[menu __card_msg]
enable: {printer.display.message}
type: item
scroll: true
width: 20
name: {printer.display.message}

[menu __card_msg_slim]
enable: {printer.display.message}
type: item
scroll: true
width: 12
name: {printer.display.message}

[menu __card_status]
type: item
name: {printer.idle_timeout.state}
width: 5

[menu __card_status_slim]
type: item
name: {printer.idle_timeout.state}
width: 1
