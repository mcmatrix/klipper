# This file serves as documentation for config parameters. One may
# copy and edit this file to configure a new menu layout.
# The snippets in this file may be copied into the main printer.cfg file.
# See the "example.cfg" file for description of common config parameters.

# Menu has default variables defined in menu.cfg
# For example, accessible as printer.menu.default.hotend_target_max
# Variables can be modified in realtime by using 'Setup -> Edit defaults' menu
# Following template actions can be used:
#   printer.menu.action_set_default(name, value) - will set <value> for default variable <name>
#   printer.menu.action_reset_defaults() - will reset saved user default values to the factory defaults
# Default variables are accessible from the script as {printer.menu.default.default_variable_name}
# Don't forget to save your config by using 'Setup -> Save config' after modifing defaults.
#
# Menu also has an option for temporary runtime variables.
# Following template action can be used:
#   printer.menu.action_set_runtime(name, value) - will set <value> for runtime variable <name>
# Runtime variables are accessible from the script as {printer.menu.runtime.runtime_variable_name}
# The runtime variables are not stored between restarts.

# Available options in menu Jinja2 template context:
# Read-only attributes for menu element:
#   menu.width - element width (number of display columns)
#   menu.ns - element namespace
#   menu.input - input value, only available in input script context
# List of actions for menu element:
#   menu.back(force, update) - will execute menu back command, optional boolean parameters <force> and <update>.
#                      When <force> is set True then it will also stop editing. Default value is False
#                      When <update> is set False then parent container items are not updated. Default value is True
#   menu.exit(force) - will execute menu exit command, optional boolean parameter <force> default value False
#                      When <force> is set True then it will also stop editing. Default value is False
#   menu.send_event(name, event, [<arg1> [,<arg2> ...]]) - will emit event 'menu:name:event' with args to klippers event system.
#                      Event first argument is always source element instance
#   menu.script_by_name(name, from) - other scripts of <from> item, can be included or imported in jinja2.
#                                     when <from> is not given then default is '.' itself and '..' is parent.
# Script attributes and methods:
#   script.event - name of the event that triggered the script, available in script context
#   script.log_gcode() - will enable script gcode output logging

# Common parameters available for all menu config sections.
#[menu some_name]
#type:
#   One of command, input, list, text:
#       command - basic menu element with various script triggers
#       input   - same like 'command' but has value changing capabilities.
#                 Press will start/stop edit mode.
#       list    - it allows for menu items to be grouped together in a scrollable list.
#                 Add to the list by creating menu configurations
#                 using "some_list" as a prefix - for example: [menu some_list some_item_in_the_list]
#       vsdlist - same as 'list' but will append files from virtual sdcard (will be removed in the future)
#name:
#   Name of menu item - evaluated as a template.
#enable:
#   Template that evaluates to True or False.
#cursor:
#   It allows to change cursor character for selected menu element.
#   The default is >
#   This parameter is optional.
#index:
#   Position where an item needs to be inserted in list
#   By default the item is added at the end. This parameter is optional.
#scroll:
#   This attribute accepts True or False. When this is enabled then
#   names longer than display size are scrolled back and forth.
#   The default is False. This parameter is optional.
#script_<name>:
#   Custom script - Evaluated as a template.

#[menu some_list]
#type: list
#name:
#enable:
#cursor:
#scroll:
#show_title:
#   Show container name next to back .. element.
#   The default is True. This parameter is optional.
#leave_gcode:
#enter_gcode:
#   Script to run on entering to list and leaving from list.
#   Evaluated as a template.

#[menu some_list some_command]
#type: command
#name:
#enable:
#cursor:
#scroll:
#gcode:
#   Script to run on button click or long click. Evaluated as a template.

#[menu some_list some_input]
#type: input
#name:
#enable:
#cursor:
#reverse:
#   When enabled it will reverse increment and decrement directions for input.
#   The default is False. This parameter is optional.
#input:
#   Initial value to use when editing - evaluated as a template.
#   Result must be float.
#input_min:
#   Minimum value of range - evaluated as a template.  Default -99999.
#input_max:
#   Maximum value of range - evaluated as a template.  Default 99999.
#input_step:
#   Editing step - Must be a positive integer or float value.
#input_step2:
#   Editing step for fast rate - Must be a positive integer or float value.
#   The default is 0 (input_step will be used instead)
#realtime:
#   This attribute accepts static boolean value.
#   When enabled then gcode script is run after each value change.
#   The default is False. This parameter is optional.
#gcode:
#   Script to run on button click, long click or value change. Evaluated as a template.
#   The button click will trigger the edit mode start or end.
