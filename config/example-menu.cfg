# This file serves as documentation for config parameters. One may
# copy and edit this file to configure a new menu layout.
# The snippets in this file may be copied into the main printer.cfg file.
# See the "example.cfg" file for description of common config parameters.

# Available menu elements:
#   item - purely visual element
#   command - same like 'item' but with gcode trigger
#   input - same like 'command' but has value changing capabilities
#   list - menu element container, with entry and exit gcode triggers
#   vsdcard - same as 'list' but will append files from virtual sdcard
#   deck - special container for custom screens (cards) has entry and exit gcode triggers.
#   card - special content card for custom screens. Can only be used in 'deck'!

# Special functions in menu Jinja2 context:
#   menu.nop() - do nothing
#   menu.back() - will execute menu back command
#   menu.exit() - will execute menu exit command
#   menu.respond(response) - will send '// response' to host.
#   menu.respond(response) - will send '!! response' to host.
#   menu.echo(response) - will send 'echo: response' to host.
#   menu.emit(name, [<arg1> [,<arg2> ...]]) - will emit event 'menu:action:<name>' with args to klippers event system.
#                                             Event first argument is always source element instance
#   menu.log(info) - will write <info> to log file.
#   input.start([<arg1>]) - will try to start edit mode
#                           If arg1 is False then skip start_gcode script, default is True
#                           Has effect only inside input elements.
#   input.stop([<arg1>]) - will try to stop edit mode
#                          If arg1 is False then skip stop_gcode script, default is True
#                          Has effect only inside input elements.
#   input.longpress-gcode() - will trigger longpress_gcode script, only input elements.
#   input.gcode(), command.gcode() - will trigger gcode script, only input, command elements.
#   deck.menu() - will open master container (deck) longpress menu.

#[menu item1]
#type: item
#   Type will determine menu item properties and behaviours:
#name:
#   This is mandatory attribute for every menu element.
#   You can use Jinja2 template scripting.
#   Multiline name is not supported.
#   Quotes can be used in the beginning and end of name.
#cursor:
#   It allows to change cursor character for selected menu element.
#   The default is >
#   This parameter is optional.
#width:
#   This attribute accepts integer value. Element name is cut to this width.
#   This parameter is optional.
#scroll:
#   This attribute accepts static boolean value. You can use it together with 'width'.
#   When this is enabled then names longer than width are scrolled back and forth.
#   The default is disabled. This parameter is optional.
#enable:
#   This attribute accepts Jinja2 expression script (result is converted to boolean).

#[menu command1]
#type:command
#name:
#cursor:
#width:
#scroll:
#enable:
#auto:
#   This attribute accepts static boolean value.
#   When False then it allows to manually control command behaviours via a press actions
#   The default is True. This parameter is optional.
#gcode:
#   When menu element is clicked then gcodes on this attribute will be executed.
#   Can have multiline gcode script and supports Jinja2 template scripting.

#[menu input1]
#type: input
#name:
#cursor:
#width:
#enable:
#input:
#   Value is taken as input value when in edit mode.
#   It accepts Jinja2 expression script (result is converted to float).
#gcode:
#   This will be triggered in realtime mode, on exit from edit mode
#   or in edit mode this will be triggered after click button long press (>0.8sec).
#   Can have multiline gcode script and supports Jinja2 template scripting.
#longpress_gcode:
#   In edit mode this will be triggered after click button long press (>0.8sec).
#   Can have multiline gcode script and supports Jinja2 template scripting.
#   The default is empty. This parameter is optional.
#start_gcode:
#   Will trigger gcode script on start of edit mode.
#   Can have multiline gcode script and supports Jinja2 template scripting.
#   The default is empty. This parameter is optional.
#stop_gcode:
#   Will trigger gcode script on stop of edit mode.
#   Can have multiline gcode script and supports Jinja2 template scripting.
#   The default is empty. This parameter is optional.
#reverse:
#   This attribute accepts static boolean value.
#   When enabled it will reverse increment and decrement directions for input.
#   The default is False. This parameter is optional.
#readonly:
#   This attribute accepts same logical expression as 'enable'.
#   When true then input element is readonly like 'item' and cannot enter to edit mode.
#   The default is False. This parameter is optional.
#realtime:
#   This attribute accepts static boolean value.
#   When enabled it will execute gcode after each value change.
#   The default is False. This parameter is optional.
#auto:
#   This attribute accepts static boolean value.
#   When False then it allows to manually control input behaviours via a short press
#   and a long press actions
#   The default is True. This parameter is optional.
#input_min:
#   It accepts integer or float value. Will set minimal bound for edit value.
#   The default is -999999.0. This parameter is optional.
#input_max:
#   It accepts integer or float value. Will set maximal bound for edit value.
#   The default is 999999.0. This parameter is optional.
#input_step:
#   This is mandatory attribute for input.
#   It accepts positive integer or float value. Will determine increment
#   and decrement steps for edit value.
#input_step2:
#   This is optional attribute for input.
#   It accepts positive integer or float value. Will determine fast rate
#   increment and decrement steps for edit value.
#   The default is 0 (input_step will be used instead)

#[menu list1]
#type:list or vsdcard
#name:
#cursor:
#width:
#scroll:
#enable:
#enter_gcode:
#   Will trigger gcode script when entering to this menu container.
#   Can have multiline gcode script and supports Jinja2 template scripting.
#   This parameter is optional.
#leave_gcode:
#   Will trigger gcode script when leaving from this menu container.
#   Can have multiline gcode script and supports Jinja2 template scripting.
#   This parameter is optional.
#show_back:
#   This attribute accepts static boolean value.
#   Show back [..] as first element.
#   The default is True. This parameter is optional.
#show_title:
#   This attribute accepts static boolean value.
#   Show container name next to back [..] element.
#   The default is True. This parameter is optional.
#items:
#   Menu elements listed in this container.
#   Each element must be on separate line.
#   Elements can be grouped on same line by separating them with comma
#
#   When element name stars with . then menu system will add parent
#   container config name as prefix to element name (delimited by space)

#[menu deck1]
#type: deck
#name:
#cursor:
#width:
#scroll:
#enable:
#enter_gcode
#leave_gcode
#constrained:
#   This attribute accepts static boolean value.
#   When enabled then on menu startup or timeout the selection is always
#   initialized with card first or sticky child element otherwise none is selected.
#   The default is False. This parameter is optional.
#longpress_menu:
#   Entry point to menu container. When this attribute is set then
#   long press > 0.8s will initiate this menu container if not in edit mode.
#   The default is disabled. This parameter is optional.
#items:
#   It accepts only 'card' elements. You are able to switch between different card screens
#   by using encoder or up/down buttons.
#content:
#   It allows quickly define single card decks by adding content directly to deck.
#   You have to remove deck item attribute and use named items in content.
#   The menu functionality will then internally create one card item for this deck.
#   This is optional.

#[menu card1]
#type: card
#name:
#content:
#   Card screen content. Each line represents display line.
#   Quotes can be used in the beginning and end of line.
#   Rendered elements are available for Jinja2 template scripting as item(0..x) method.
#   When method has more than one argument then output is tuple of rendered contents.
#   It's possible directly use menu item names in content by leaving items attribute out or empty
#   and use menu items names directly in content as item('msg,xpos|ypos'). The menu functionality will then
#   internally build a item list.
#   This is optional.
#items:
#   List of elements in card. Each line represents a single index for script.
#   It's possible to show multiple elements in one place by separating them with comma on single line.
#   If first element is integer then timed cycle is used (integer value is cycle time in seconds)
#   If no integer element then first enabled element is shown.
#   In cycler multiple elements can be grouped into one postition by separating them with |
#   This way only simple menu items can be grouped.
#   Example: 5,prt_time, prt_progress - elements prt_time and prt_progress are switched after 5s
#   Example: msg,xpos|ypos - elements xpos and ypos are grouped and showed together when msg is disabled.
#use_cursor:
#   This attribute accepts static boolean value.
#   When enabled the menu system uses a cursor instead of blinking to visualize item selection
#   and edit mode for this card. Cursor and placeholder is always added as item name prefix.
#   The default is False. This parameter is optional.
#sticky:
#   This element is selected by default on card. In case of input element then edit mode is started.
#   It has to be non read-only element (selectable)
#   The default is disabled. This parameter is optional.
