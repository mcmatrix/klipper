# This file serves as documentation for config parameters. One may
# copy and edit this file to configure a new menu layout.
# The snippets in this file may be copied into the main printer.cfg file.
# See the "example.cfg" file for description of common config parameters.

# Menu has default variables defined in menu.cfg
# For example, accessible as printer.menu.default.hotend_target_max
# Default menu is using these variables to make menu options more flexible.
# Variables can be modified in realtime by using 'Setup -> Edit defaults' menu
# Following menu jinja2 script actions can be used:
#   printer.menu.action_set_default(name, value)
#   printer.menu.action_reset_defaults()
# Don't forget to save your config by using 'Setup -> Save config' after modifing defaults.

# When using item namespace then following markup options are available:
#   .  - current item namespace.
#   .. - will take one step back in namespace.
#   Menu item config names in namespace are delimited by space.
#   When name stars with . then menu system will add container config name
#   as prefix to item name (delimited by space).
#   Please see default menu.cfg for example usage.

# Available menu elements:
#   item -  menu element with various script triggers
#   input - same like 'item' but has value changing capabilities
#   view -  menu element container, with various script triggers
#           and screen rendering capabilities
#   vsdview - same as 'view' but will append files from virtual sdcard (will be removed in the future)

# Available options in menu Jinja2 context:
# Read-only attributes for menu element:
#   me.is_editing - is element in editing mode
#   me.width - element width when given otherwise number of display columns
#   me.ns - element namespace
#   me.input - input value, only available in input script context
#   me.popup_names - list of popup names, only available in view script context
#   me.runtime_names - list of runtime names, only available in view script context
# Script attributes and methods:
#   script.name - script name, available in script context
#   script.by_name(name, from) - other scripts of <from> item, can be included or imported in jinja2.
#                                when <from> is not given then default is '.' itself. Namespace markup can be used here.
#   script.prevent_default() - prevent script default (builtin) behaviour, available in script context
#                              The input item has default shortpress behaviour to start and stop editing automatically.
# Run custom commands in script with pattern 'run.scope.command' where <scope> can be:
#   'menu' - commands available in menu manager class
#   'container' - commands available in current active container
#   'me' or empty - commands available in current menu item
# List of available commands:
#   run.menu.back(force) - will execute menu back command, optional boolean parameter <force>.
#                          When <force> is set True then it will also stop editing. Default value is False
#   run.menu.exit(force) - will execute menu exit command, optional boolean parameter <force> default value False
#                          When <force> is set True then it will also stop editing. Default value is False
#   run.emit(name, [<arg1> [,<arg2> ...]]) - will emit event 'menu:command:<name>' with args to klippers event system.
#                                            Event first argument is always source element instance
#   run.log(info) - will write <info> to log file. Output in form 'item:item_namespace -> info'
#   run.start_editing() - available in input item script context, will start edit mode
#   run.stop_editing() - available in input item script context, will stop edit mode
#   run.<scope>.popup(name) - available in container script context, will push and show new container <name>
#
# Default config behaviour is to strip whitespaces from the beginning and end of the names and scripts.
# By using literals markup you can retain whitespaces.
# Literals are beginning or/and ending by the back-tick '`' (grave accent) character instead of double or single quotes.
# To escape a back-tick use a double back-tick.

#[menu item_ns]
#type: item
#   Type will determine menu item properties and behaviours:
#name:
#   This is mandatory attribute for every menu element.
#   You can use Jinja2 template scripting.
#enable:
#   It allows to enable/disable menu element.
#   This attribute supports static boolean values and Jinja2 template scripting (result is converted to boolean).
#use_blinking:
#   This attribute accepts boolean value.
#   When this is enabled then blinking effect is used when selected or editing.
#   The default is disabled. This parameter is optional.
#blinking_mask:
#   Optional parameter that can be used to mask name parts that should not blink.
#   Markup: + is not blinking and . or any other char is blinking
#   The default is empty.
#use_cursor:
#   This attribute accepts boolean value.
#   When this is enabled then cursor is used when selected or editing.
#   If cursor is in use then it adds 1 additional character to name
#   The default is enabled. This parameter is optional.
#cursor:
#   It allows to change cursor character for selected menu element.
#   The item default cursor is |
#   The container default cursor is >
#   This parameter is optional.
#width:
#   This attribute accepts integer value. Element name is cut to this width.
#   This parameter is optional.
#scroll:
#   This attribute accepts static boolean value. You can use it together with 'width'.
#   When this is enabled then names longer than width are scrolled back and forth.
#   The default is disabled. This parameter is optional.
#script_name:
#   Various jinja2 scripts with name <name> can be defined.
#   Some script names are used and executed by the system:
#   select - when item is selected
#   shortpress - when short press is happening
#   longpress - when long press is happening
#   dblpress - when double press is happeing
#   press - when (any)press is happening, specific name is in 'script.name'

#[menu input_ns]
#type: input
#name:
#enable:
#use_blinking:
#blinking_mask:
#use_cursor:
#cursor:
#width:
#reverse:
#   This attribute accepts boolean value.
#   When enabled it will reverse increment and decrement directions for input.
#   The default is False. This parameter is optional.
#input:
#   Value is taken as input value when in edit mode.
#   It supports Jinja2 template scripting. Result must be float.
#input_min:
#   It supports Jinja2 template scripting and accepts integer or float value.
#   Will set minimal bound for edit value.
#   The default is -999999.0. This parameter is optional.
#input_max:
#   It supports Jinja2 template scripting and accepts integer or float value.
#   Will set maximal bound for edit value.
#   The default is 999999.0. This parameter is optional.
#input_step:
#   This is mandatory attribute for input.
#   It accepts positive integer or float value. Will determine increment
#   and decrement steps for edit value.
#input_step2:
#   This is optional attribute for input.
#   It accepts positive integer or float value. Will determine fast rate
#   increment and decrement steps for edit value.
#   The default is 0 (input_step will be used instead)
#script_name:
#   Various jinja2 scripts with name <name> can be defined.
#   Some script names are used and executed by the system:
#   Inherits all script triggers from item
#   change - when input item value is changed in edit mode

#[menu view_ns]
#type:view
#name:
#enable:
#use_blinking:
#blinking_mask:
#use_cursor:
#cursor:
#width:
#scroll:
#autorun:
#   This attribute accepts boolean value.
#   When set True and this container is root then it'll be initiated immediately at startup.
#   The default is False. This parameter is optional.
#permit_timeout:
#   This attribute accepts boolean value.
#   When set False then no timeout is allowed when this container is current active.
#   The default is True. This parameter is optional.
#initial:
#   This attribute accepts integer value or none.
#   When entering to this container then item by this index is selected (starting from 0).
#   When it's none then no item is initially selected.
#   The default is 0. This parameter is optional.
#popup_name:
#   Entry point to popup menu container. Multiple popup menus with
#   different name <name> can be defined.
#   Can be activated by command popup(<name>). Look commands.
#items:
#   Optional mutable list of items. This list can be extended in runtime
#   Each name must be on separate line.
#   When name stars with . then menu system will add parent
#   container config name as prefix to element name (delimited by space)
#   These items will be added to the container after inline items.
#script_name:
#   Various jinja2 scripts with name <name> can be defined.
#   Some script names are used and executed by the system:
#   Inherits all script triggers from item
#   leave - when leaving from view container
#   enter - when entering to view container.
#   render - when view item is current container, executed on every screen refresh.
#            The rendered result of this script is showed on display. Each result line represents
#            display line. The viewport is scrolled to selected item line if any.
#            If no items or none is selected then viewport starts at row 0.
#
#            To add items to container a placeholder must be used:
#            <?item:item_ns?> - will add inline item_ns to container, list of this items is immutable.
#                               It's the preferred way of adding item to the container.
#            <?back:..?> - special comfort placeholder for item with back() command,
#                          you can use custom string instead of ..
#            <?name:name_ns?> - placeholder for runtime item, see 'me.runtime_names'.
#                               Must be on same order as items were defined
#            Please keep in mind that these placeholders will be replaced by rendered item content after jinja2
#            template rendering. Therefore the rendered item content is not available in time of view
#            script rendering. Please see default menu.cfg for example usage.
